package io.johnvincent.gomoku.library.counter;

import java.util.Iterator;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import io.johnvincent.gomoku.library.pattern.PatternUtils;
import io.johnvincent.gomoku.library.rates.RateHelper;
import io.johnvincent.gomoku.library.rates.SpecialCaseRatesItem;
import io.johnvincent.gomoku.library.rates.SummaryRatesItem;
import io.johnvincent.gomoku.library.specialcases.FindActual;
import io.johnvincent.gomoku.library.specialcases.FindActualList;
import io.johnvincent.gomoku.library.specialcases.FindGroup;
import io.johnvincent.gomoku.library.specialcases.FindGroupList;
import io.johnvincent.gomoku.library.specialcases.SpecialCases;
import io.johnvincent.gomoku.library.utils.Utilities;
import io.johnvincent.gomoku.library.winner.WinnerList;

@JsonPropertyOrder({ "player", "row", "column", "totalScore", "currentPlayerScore", "otherPlayerScore", "patterns", "specialCases", "summaryRatesItem" })
public class CounterSquare {

	@JsonProperty("patterns")
	private CounterPatterns counterPatterns;

	private int player;
	private int row;
	private int column;
	
	private int totalScore = 0;
	private int currentPlayerScore = 0;
	private int otherPlayerScore = 0;
	
	private boolean debug = false;

	@JsonProperty("specialCases")
	private SpecialCases m_specialCases = null;

	@JsonProperty("summaryRatesItem")
	private SummaryRatesItem m_summaryRatesItem = null;

	public CounterSquare(CounterPatterns counterPatterns, final int player, final int row, final int column) {
		assert counterPatterns != null;
		
		this.counterPatterns = counterPatterns;
		this.player = player;
		this.row = row;
		this.column = column;
//		if (player == 1 && row == 6 && column == 7) this.debug = true;
	}
	
	public int getPlayer() {return player;}
	public int getRow() {return row;}
	public int getColumn() {return column;}

	public int getTotalScore() {return totalScore;}
	public int getCurrentPlayerScore() {return currentPlayerScore;}
	public int getOtherPlayerScore() {return otherPlayerScore;}

	public SummaryRatesItem getSummaryRatesItem() {return m_summaryRatesItem;}

	public void setOtherPlayerScore(final int score) {
//		System.out.println("CounterSquare::setOtherPlayerScore; score "+score);
		this.otherPlayerScore = score;
		this.totalScore = this.currentPlayerScore + this.otherPlayerScore;
	}

	public CounterPatternsItem getCounterPatternsItem(final int pattern) {
//		System.out.println("CounterSquare::getCounterPatternsItem; pattern "+pattern);
		return this.counterPatterns.getCounterPatternsItem(pattern);	
	}
	
	public WinnerList getWinnerList() {return counterPatterns.getWinnerList();}

	public void calculateSquareTotal() {
		int casesTotal = m_specialCases == null ? 0 : m_specialCases.getSpecialCasesScore();
		this.currentPlayerScore = casesTotal + this.counterPatterns.getPatternsScore();
	}

	public void calculateSummaryRates() {
		SummaryRatesItem item = new SummaryRatesItem();

		if (m_specialCases != null) {
			SummaryRatesItem summaryRatesItem1 = m_specialCases.getSpecialCasesSummaryRatesItem();
			if (summaryRatesItem1 != null && summaryRatesItem1.isUseful()) {
//				System.out.println("calculateSummaryRates; special cases "+summaryRatesItem1.toString());
				item.add(summaryRatesItem1);
			}
		}
		
		SummaryRatesItem summaryRatesItem2 = this.counterPatterns.getGroupsSummaryRatesItem();
		if (summaryRatesItem2 != null && summaryRatesItem2.isUseful()) {
//			System.out.println("calculateSummaryRates; groups "+summaryRatesItem2.toString());
			item.add(summaryRatesItem2);
		}

		SummaryRatesItem summaryRatesItem3 = this.counterPatterns.getActualsSummaryRatesItem();
		if (summaryRatesItem3 != null && summaryRatesItem3.isUseful()) {
//			System.out.println("calculateSummaryRates; actual "+summaryRatesItem3.toString());
			item.add(summaryRatesItem3);
		}

		if (item.isUseful()) {
//			System.out.println("calculateSummaryRates; all "+item.toString());
			m_summaryRatesItem = item;
		}
	}
	
	private void addSpecialCase(final SpecialCaseRatesItem specialCaseRatesItem, final int count, final int score) {
		assert specialCaseRatesItem != null;
		
		if (m_specialCases == null) {
			m_specialCases = new SpecialCases(player, row, column);
		}
		m_specialCases.addSpecialCase(specialCaseRatesItem, count, score);
	}
	
	public void handleSpecialCases() {
		handleScoresSpecialCase_1(RateHelper.getSpecialCasesRatesItem(1));
		handleScoresSpecialCase_2(RateHelper.getSpecialCasesRatesItem(2));
		handleScoresSpecialCase_3(RateHelper.getSpecialCasesRatesItem(3));
		handleScoresSpecialCase_4(RateHelper.getSpecialCasesRatesItem(4));
		handleScoresSpecialCase_5(RateHelper.getSpecialCasesRatesItem(5));
		handleScoresSpecialCase_6(RateHelper.getSpecialCasesRatesItem(6));
	}

	/**
	 * 
	 * case 5 of (3+3): 2+3+1 & 2+3+1
	 * case 6 of (3+3): 2+3+2 & 2+3+1
	 * case 7 of (3+3): 2+3+2 & 2+3+2
	 * 
	 * @param specialCaseRatesItem	SpecialCaseRatesItem
	 */
	private void handleScoresSpecialCase_1(final SpecialCaseRatesItem specialCaseRatesItem) {
		FindActualList list = new FindActualList();
		list.add(new FindActual(2, 3, 1));
		list.add(new FindActual(1, 3, 2));
		list.add(new FindActual(2, 3, 2));
		
		int count = getTypeCount(list);
		if (count > 1) {
			int score = (count - 1) * specialCaseRatesItem.getRate();
			addSpecialCase(specialCaseRatesItem, count, score);
		}
	}

	/**
	 * 
	 * case 1, 2, 3, 4, 6 of (3, 3 of 4): (1_3_2 or 2_3_1 or 2_3_2) & (1_3_4_1 or 1_3_4_2 or 2_3_4_1 or 2_3_4_2)
	 * 
	 * @param specialCaseRatesItem	SpecialCaseRatesItem
	 */
	private void handleScoresSpecialCase_2(final SpecialCaseRatesItem specialCaseRatesItem) {
		FindActualList listA = new FindActualList();
		listA.add(new FindActual(1, 3, 2));
		listA.add(new FindActual(2, 3, 1));
		listA.add(new FindActual(2, 3, 2));

		FindGroupList listB = new FindGroupList();
		listB.add(new FindGroup(RateHelper.getGroupRatesItem(1, 3, 4, 1).getKey()));
		listB.add(new FindGroup(RateHelper.getGroupRatesItem(1, 3, 4, 2).getKey()));
		listB.add(new FindGroup(RateHelper.getGroupRatesItem(2, 3, 4, 1).getKey()));
		listB.add(new FindGroup(RateHelper.getGroupRatesItem(2, 3, 4, 2).getKey()));

		int count = getTypeCount(listA, listB);
		if (count > 0) {
			int score = count * specialCaseRatesItem.getRate();
			addSpecialCase(specialCaseRatesItem, count, score);
		}
	}

	/**
	 * 
	 * Cases (3, 4 of 5):
	 * 
	 * @param counterInfo	CounterInfo
	 * @param player		player
	 * @param r				row
	 * @param c				column
	 */
	private void handleScoresSpecialCase_3(final SpecialCaseRatesItem specialCaseRatesItem) {
		FindActualList listA = new FindActualList();
		listA.add(new FindActual(1, 3, 2));
		listA.add(new FindActual(2, 3, 1));

		FindGroupList listB = new FindGroupList();
		listB.add(new FindGroup(RateHelper.getGroupRatesItem(0, 4, 5, 0).getKey()));
		listB.add(new FindGroup(RateHelper.getGroupRatesItem(0, 4, 5, 1).getKey()));
		listB.add(new FindGroup(RateHelper.getGroupRatesItem(0, 4, 5, 2).getKey()));
		listB.add(new FindGroup(RateHelper.getGroupRatesItem(1, 4, 5, 0).getKey()));
		listB.add(new FindGroup(RateHelper.getGroupRatesItem(1, 4, 5, 1).getKey()));
		listB.add(new FindGroup(RateHelper.getGroupRatesItem(1, 4, 5, 2).getKey()));
		
		listB.add(new FindGroup(RateHelper.getGroupRatesItem(2, 4, 5, 0).getKey()));
		listB.add(new FindGroup(RateHelper.getGroupRatesItem(2, 4, 5, 1).getKey()));
		listB.add(new FindGroup(RateHelper.getGroupRatesItem(2, 4, 5, 2).getKey()));

		int count = getTypeCount(listA, listB);
		if (count > 0) {
			int score = count * specialCaseRatesItem.getRate();
			addSpecialCase(specialCaseRatesItem, count, score);
		}
	}

	/**
	 * 
	 * case 1 of (4, 4 of 5): 2 or more of any_4_5_any
	 * 
	 * @param counterInfo	CounterInfo
	 * @param player		player
	 * @param r				row
	 * @param c				column
	 */
	private void handleScoresSpecialCase_4(final SpecialCaseRatesItem specialCaseRatesItem) {
		FindGroupList listB = new FindGroupList();
		listB.add(new FindGroup(RateHelper.getGroupRatesItem(0, 4, 5, 0).getKey()));
		listB.add(new FindGroup(RateHelper.getGroupRatesItem(0, 4, 5, 1).getKey()));
		listB.add(new FindGroup(RateHelper.getGroupRatesItem(0, 4, 5, 2).getKey()));
		
		listB.add(new FindGroup(RateHelper.getGroupRatesItem(1, 4, 5, 0).getKey()));
		listB.add(new FindGroup(RateHelper.getGroupRatesItem(1, 4, 5, 1).getKey()));
		listB.add(new FindGroup(RateHelper.getGroupRatesItem(1, 4, 5, 2).getKey()));
		
		listB.add(new FindGroup(RateHelper.getGroupRatesItem(2, 4, 5, 0).getKey()));
		listB.add(new FindGroup(RateHelper.getGroupRatesItem(2, 4, 5, 1).getKey()));
		listB.add(new FindGroup(RateHelper.getGroupRatesItem(2, 4, 5, 2).getKey()));
		
		int count = getTypeCount(listB);
		if (count > 1) {
			int score = (count - 1) * specialCaseRatesItem.getRate();
			addSpecialCase(specialCaseRatesItem, count, score);
		}
	}

	/**
	 * 
	 * case 1 of (4, 4 of 5): (0_4_1 or 1_4_0) & (any_4_5_any)
	 * 
	 * @param counterInfo	CounterInfo
	 * @param player		player
	 * @param r				row
	 * @param c				column
	 */
	private void handleScoresSpecialCase_5(final SpecialCaseRatesItem specialCaseRatesItem) {
		FindActualList listA = new FindActualList();
		listA.add(new FindActual(0, 4, 1));
		listA.add(new FindActual(0, 4, 2));

		listA.add(new FindActual(1, 4, 0));
		listA.add(new FindActual(1, 4, 1));
		listA.add(new FindActual(1, 4, 2));
//		
		listA.add(new FindActual(2, 4, 0));
		listA.add(new FindActual(2, 4, 1));
		listA.add(new FindActual(2, 4, 2));

		FindGroupList listB = new FindGroupList();
		listB.add(new FindGroup(RateHelper.getGroupRatesItem(0, 4, 5, 0).getKey()));
		listB.add(new FindGroup(RateHelper.getGroupRatesItem(0, 4, 5, 1).getKey()));
		listB.add(new FindGroup(RateHelper.getGroupRatesItem(0, 4, 5, 2).getKey()));
		
		listB.add(new FindGroup(RateHelper.getGroupRatesItem(1, 4, 5, 0).getKey()));
		listB.add(new FindGroup(RateHelper.getGroupRatesItem(1, 4, 5, 1).getKey()));
		listB.add(new FindGroup(RateHelper.getGroupRatesItem(1, 4, 5, 2).getKey()));
		
		listB.add(new FindGroup(RateHelper.getGroupRatesItem(2, 4, 5, 0).getKey()));
		listB.add(new FindGroup(RateHelper.getGroupRatesItem(2, 4, 5, 1).getKey()));
		listB.add(new FindGroup(RateHelper.getGroupRatesItem(2, 4, 5, 2).getKey()));

		int count = getTypeCount(listA, listB);
		if (count > 0) {
			int score = count * specialCaseRatesItem.getRate();
			addSpecialCase(specialCaseRatesItem, count, score);
		}
	}

	/**
	 * 
	 * case 6 of (3 of 4, 3 of 4): 2 or more of 1_3_4_1
	 * 
	 * @param counterInfo	CounterInfo
	 * @param player		player
	 * @param r				row
	 * @param c				column
	 */
	private void handleScoresSpecialCase_6(final SpecialCaseRatesItem specialCaseRatesItem) {
		FindGroupList listB = new FindGroupList();
		listB.add(new FindGroup(RateHelper.getGroupRatesItem(1, 3, 4, 1).getKey()));
		listB.add(new FindGroup(RateHelper.getGroupRatesItem(2, 3, 4, 1).getKey()));
		listB.add(new FindGroup(RateHelper.getGroupRatesItem(1, 3, 4, 2).getKey()));
		listB.add(new FindGroup(RateHelper.getGroupRatesItem(2, 3, 4, 2).getKey()));
		
		int count = getTypeCount(listB);
		if (count > 1) {
			int score = (count - 1) * specialCaseRatesItem.getRate();
			addSpecialCase(specialCaseRatesItem, count, score);
		}
	}

	private int getSpecialCaseCount(final CounterPatternsItem item, FindActualList findActualList) {
		CounterActual patternActual = item.getCounterActual();
		int count = 0;
		for (Iterator<FindActual> iter = findActualList.getItems(); iter.hasNext(); ) {
			FindActual findActual = iter.next();
			boolean include = isSpecialCaseFound(findActual, patternActual);
			if (include) count++;
		}
		return count;
	}
	
	/*
	before & after
	 = 0 => exactly none
	 = 1 => exactly one
	 = 2 => 2 or more
	 */
	private boolean isSpecialCaseFound(final FindActual findActual, final CounterActual patternActual) {
		if (this.debug)  {
			System.out.println("isSpecialCaseFound; findActual "+findActual.toString()+" CounterActual "+patternActual.toString());
		}	
		
		int aBefore = findActual.getBefore();
		int aActual = findActual.getActual();
		int aAfter = findActual.getAfter();
		
		int bBefore = patternActual.getBeforeActual();
		int bActual = patternActual.getActual();
		int bAfter = patternActual.getAfterActual();

		if (aActual != bActual) return false;
		
		if (aBefore == 0 && bBefore > 0) return false;
		if (aBefore == 1 && bBefore > 1) return false;
		if (aBefore == 2 && bBefore < 2) return false;

		if (bBefore == 0 && aBefore > 0) return false;
		if (bBefore == 1 && aBefore > 1) return false;
		if (bBefore == 2 && aBefore < 2) return false;
		
		if (aAfter == 0 && bAfter > 0) return false;
		if (aAfter == 1 && bAfter > 1) return false;
		if (aAfter == 2 && bAfter < 2) return false;

		if (bAfter == 0 && aAfter > 0) return false;
		if (bAfter == 1 && aAfter > 1) return false;
		if (bAfter == 2 && aAfter < 2) return false;

		if (this.debug)  {
			System.out.println("isSpecialCaseFound; return true");
		}
		return true;
	}

	private int getTypeCount(final FindActualList findActualList) {
		int[] actual = {0, 0, 0, 0};
		for (int pattern = 0; pattern < PatternUtils.getNumberOfVictoryPatterns(); pattern++) {
			assert PatternUtils.isValidPattern(pattern);
			
			CounterPatternsItem item = getCounterPatternsItem(pattern);
			if (item == null) continue;

			actual[pattern] = getSpecialCaseCount(item, findActualList);
		}
		if (this.debug)  {
			System.out.println("getTypeCount; actual "+Utilities.convertIntArrayToString(actual));
		}
		return actual[0] + actual[1] + actual[2] + actual[3];
	}

	private int getTypeCount(final FindGroupList listGroup) {
		int[] group = {0, 0, 0, 0};
		for (int pattern = 0; pattern < PatternUtils.getNumberOfVictoryPatterns(); pattern++) {
			assert PatternUtils.isValidPattern(pattern);
			
			CounterPatternsItem item = getCounterPatternsItem(pattern);
			if (item == null) continue;

			group[pattern] = item.getGroupCount(listGroup);
		}
//		if (this.debug)  {
//			System.out.println("(case 4) group "+Utilities.convertIntArrayToString(group));
//		}
		return group[0] + group[1] + group[2] + group[3];
	}

	private int getTypeCount(final FindActualList findActualList, final FindGroupList findListGroup) {
		int[] actual = {0, 0, 0, 0};
		int[] group = {0, 0, 0, 0};
		for (int pattern = 0; pattern < PatternUtils.getNumberOfVictoryPatterns(); pattern++) {
			assert PatternUtils.isValidPattern(pattern);
			
			CounterPatternsItem item = getCounterPatternsItem(pattern);
			if (item == null) continue;

			actual[pattern] = getSpecialCaseCount(item, findActualList);
			group[pattern] = item.getGroupCount(findListGroup);
		}
//		if (this.debug)  {
//			System.out.println("actual "+Utilities.convertIntArrayToString(actual));
//			System.out.println("group "+Utilities.convertIntArrayToString(group));
//		}

		int total = 0;
		if (actual[0] > 0) {
			if (group[1] > 0 || group[2] > 0 || group[3] > 0) total++;
		}
		if (actual[1] > 0) {
			if (group[0] > 0 || group[2] > 0 || group[3] > 0) total++;
		}
		if (actual[2] > 0) {
			if (group[0] > 0 || group[1] > 0 || group[3] > 0) total++;
		}
		if (actual[3] > 0) {
			if (group[0] > 0 || group[1] > 0 || group[2] > 0) total++;
		}
//		if (this.debug) System.out.println("total "+total);
		
		int count = 0;
		if (actual[0] > 0 && group[0] > 0) count++;
		if (actual[1] > 0 && group[1] > 0) count++;
		if (actual[2] > 0 && group[2] > 0) count++;
		if (actual[3] > 0 && group[3] > 0) count++;
		if (count > 1) total++;

//		if (this.debug) System.out.println("count "+count);
//		if (this.debug) System.out.println("(2) total "+total);
		return total;
	}
	
	public String toString() {
		return "("+getPlayer()+","+getRow()+","+getColumn()+",["+counterPatterns+"])";
	}
}
