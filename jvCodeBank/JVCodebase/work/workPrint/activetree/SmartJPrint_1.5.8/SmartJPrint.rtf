{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f15\fswiss\fcharset0\fprq2{\*\panose 020b0604030504040204}Tahoma;}{\f17\fnil\fcharset0\fprq0{\*\panose 00000000000000000000}Dialog;}{\f90\froman\fcharset238\fprq2 Times New Roman CE;}{\f91\froman\fcharset204\fprq2 Times New Roman Cyr;}
{\f93\froman\fcharset161\fprq2 Times New Roman Greek;}{\f94\froman\fcharset162\fprq2 Times New Roman Tur;}{\f95\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f96\fswiss\fcharset238\fprq2 Arial CE;}{\f97\fswiss\fcharset204\fprq2 Arial Cyr;}
{\f99\fswiss\fcharset161\fprq2 Arial Greek;}{\f100\fswiss\fcharset162\fprq2 Arial Tur;}{\f101\fswiss\fcharset186\fprq2 Arial Baltic;}{\f180\fswiss\fcharset238\fprq2 Tahoma CE;}{\f181\fswiss\fcharset204\fprq2 Tahoma Cyr;}
{\f183\fswiss\fcharset161\fprq2 Tahoma Greek;}{\f184\fswiss\fcharset162\fprq2 Tahoma Tur;}{\f185\fswiss\fcharset186\fprq2 Tahoma Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;
\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;
\red192\green192\blue192;}{\stylesheet{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}{\*\cs10 \additive Default Paragraph Font;}{\s15\widctlpar\adjustright \cbpat9 \f15\fs20\cgrid \sbasedon0 \snext15 Document Map;}}{\info{\author Dipak Roy}
{\operator Dipak Roy}{\creatim\yr2004\mo4\dy8\hr21\min35}{\revtim\yr2004\mo4\dy8\hr21\min36}{\version2}{\edmins0}{\nofpages1}{\nofwords264}{\nofchars1505}{\*\company Dell Computer Corporation}{\nofcharsws1848}{\vern113}}
\widowctrl\ftnbj\aenddoc\hyphcaps0\viewkind4\viewscale100 \fet0\sectd \linex0\sectdefaultcl {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3
\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \nowidctlpar\adjustright 
\fs20\cgrid {\b\f1\fs40\cf9\cgrid0 Generate PDF Documents using "Smart JPrint"
\par }{\f1\fs24\cf1\cgrid0 
\par Smart JPrint APIs are truly smart in taking care of any kind of PDF generation and printing needs. SmartJ printing APIs lets you }{\i\f1\fs24\cf1\cgrid0 
automaticaly format text and icons as your Java program output and from Swing components to generate PDF, or print to a printer, or optionally preview the output in a wanderful preview UI.
\par 
\par }\pard \nowidctlpar\outlinelevel0\adjustright {\f1\fs30\cf9\cgrid0 Generate PDF from your J2EE Server Applications
\par }\pard \nowidctlpar\adjustright {\f1\fs24\cf1\cgrid0 
\par Deploy the SmartJ
Print APIs to generate PDF files from your J2EE server. Let your J2EE program write styled text, icons, and 2D graphics using the SmartJ printing APIs. You can then have options to generate a "Adobe Acrobat" readable PDF document as a file, or print the o
utput to a printer. Design your PDF forms using the text, icons, and 2D graphics. Look at the examples to find out how simple it is to do all of these from your Java program.
\par 
\par }\pard \nowidctlpar\outlinelevel0\adjustright {\f1\fs30\cf9\cgrid0 Generate PDF from your Java GUI Swing components
\par }\pard \nowidctlpar\adjustright {\f1\fs24\cf1\cgrid0 
\par Java GUI application can genera
te the output to a PDF document from a GUI component such as tables (using JTable), text data (from JTextArea, JTextPane, JEditorPane, or any kind of JTextComponent) and images. The SmartJ printing APIs automatically prints these components by breaking th
em into rows and columns and pages as appropriate.
\par 
\par }\pard \nowidctlpar\outlinelevel0\adjustright {\f1\fs30\cf9\cgrid0 Print and/or Preview
\par }\pard \nowidctlpar\adjustright {\f1\fs24\cf1\cgrid0 
\par Smart JPrint APIs are very flexable and allows you to either print the output to a printer, preview the output using a GUI preview window, and/or send the output to write as a PDF doc
ument. Therefore, you can generate PDF files or create hard copies of the output by printing it to a printer. For a GUI based program, you can preview the output and then you can select page(s) to print or generate PDF documents.
\par 
\par }\pard \nowidctlpar\outlinelevel0\adjustright {\f1\fs30\cf9\cgrid0 Downloads and details?
\par }\pard \nowidctlpar\adjustright {\f1\fs24\cf1\cgrid0 
\par You might check at out website }{\i\f1\fs24\cf1\cgrid0 http://www.activetree.com }{\f1\fs24\cf1\cgrid0 for the details of the products, features, and downloads.
\par }{\f1\cf1\cgrid0 
\par }{\f17\fs24\cf1\cgrid0 
\par }}