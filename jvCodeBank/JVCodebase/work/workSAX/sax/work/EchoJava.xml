<?xml version='1.0' encoding='US-ASCII'?>
<pre>
/*
 * @(#)Echo<?version #?>.java 1.5 99/02/09
 *
 * Copyright (c) 2004 Sun Microsystems, Inc.  All rights reserved.  U.S.
 * Government Rights - Commercial software.  Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and
 * applicable provisions of the FAR and its supplements.  Use is subject
 * to license terms. 
 *
 * This distribution may include materials developed by third parties.
 * Sun, Sun Microsystems, the Sun logo, Java and J2EE are trademarks
 * or registered trademarks of Sun Microsystems, Inc. in the U.S. and
 * other countries. 
 *
 * Copyright (c) 2004 Sun Microsystems, Inc. Tous droits reserves.
 *
 * Droits du gouvernement americain, utilisateurs gouvernementaux - logiciel
 * commercial. Les utilisateurs gouvernementaux sont soumis au contrat de
 * licence standard de Sun Microsystems, Inc., ainsi qu'aux dispositions
 * en vigueur de la FAR (Federal Acquisition Regulations) et des
 * supplements a celles-ci.  Distribue par des licences qui en
 * restreignent l'utilisation.
 *
 * Cette distribution peut comprendre des composants developpes par des
 * tierces parties. Sun, Sun Microsystems, le logo Sun, Java et J2EE
 * sont des marques de fabrique ou des marques deposees de Sun
 * Microsystems, Inc. aux Etats-Unis et dans d'autres pays.
 */

import java.io.*;

import org.xml.sax.*;
import org.xml.sax.helpers.DefaultHandler;
<?version 11 add?>
import org.xml.sax.ext.LexicalHandler;
<?version end add?>

import javax.xml.parsers.SAXParserFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;

public class Echo<?version #?> extends DefaultHandler
<?version 11 add?>
   implements LexicalHandler
<?version end add?>
{
    StringBuffer textBuffer;
    
    public static void main(String argv[])
    {
        if (argv.length != 1) {
            System.err.println("Usage: cmd filename");
            System.exit(1);
        }
        
        // Use an instance of ourselves as the SAX event handler
      <?version 11 del?>
        DefaultHandler handler = new Echo<?version #?>();
      <?version end del?>
      <?version 11 add?>
        Echo<?version #?> handler = new Echo<?version #?>();
      <?version end add?>

      <?version 10 del?>
        // Use the default (non-validating) parser
      <?version end del?>
      <?version 10 add?>
        // Use the validating parser
      <?version end add?>
        SAXParserFactory factory = SAXParserFactory.newInstance();
      <?version 10 add?>
        factory.setValidating(true);
        //factory.setNamespaceAware(true);
      <?version end add?>
        try {
            // Set up output stream
            out = new OutputStreamWriter(System.out, "UTF8");

            // Parse the input
            SAXParser saxParser = factory.newSAXParser();
      <?version 11 add?>
            XMLReader xmlReader = saxParser.getXMLReader();
            xmlReader.setProperty(
                "http://xml.org/sax/properties/lexical-handler",
                 handler
                 );            
      <?version end add?>
            saxParser.parse( new File(argv[0]), handler);

      <?version 06 add?>
        } catch (SAXParseException spe) {
           // Error generated by the parser
           System.out.println("\n** Parsing error"
              + ", line " + spe.getLineNumber()
              + ", uri " + spe.getSystemId());
           System.out.println("   " + spe.getMessage() );

           // Use the contained exception, if any
           Exception  x = spe;
           if (spe.getException() != null)
               x = spe.getException();
           x.printStackTrace();

        } catch (SAXException sxe) {
           // Error generated by this application
           // (or a parser-initialization error)
           Exception  x = sxe;
           if (sxe.getException() != null)
               x = sxe.getException();
           x.printStackTrace();

        } catch (ParserConfigurationException pce) {
            // Parser with specified options can't be built
            pce.printStackTrace();

        } catch (IOException ioe) {
           // I/O error
           ioe.printStackTrace();

      <?version end add?>
        } catch (Throwable t) {
            t.printStackTrace();
        }
        System.exit(0);
    }

    static private Writer  out;
  <?version 03 add?>
    private String indentString = "    "; // Amount to indent
    private int indentLevel = 0;
  <?version end add?>

    //===========================================================
    // SAX DocumentHandler methods
    //===========================================================

  <?version 04 add?>
    public void setDocumentLocator(Locator l)
    {
        // Save this to resolve relative URIs or to give diagnostics.
        try {
          out.write("LOCATOR");
          out.write("\n SYS ID: " + l.getSystemId() );
          out.flush();
        } catch (IOException e) {
            // Ignore errors
        }
    }

  <?version end add?>
    public void startDocument()
    throws SAXException
    {
      <?version 02 add?>
        nl();
        nl();
        emit("START DOCUMENT");
        nl();
      <?version end add?>
        emit("&lt;?xml version='1.0' encoding='UTF-8'?>");
      <?version 02 del?>
        nl();
      <?version end del?>
    }

    public void endDocument()
    throws SAXException
    {
      <?version 02 add?>
        nl(); 
        emit("END DOCUMENT");
      <?version end add?>
        try {
            nl();
            out.flush();
        } catch (IOException e) {
            throw new SAXException("I/O error", e);
        }
    }

    public void startElement(String namespaceURI,
                             String sName, // simple name
                             String qName, // qualified name
                             Attributes attrs)
    throws SAXException
    {
        echoText();
      <?version 03 add?>
        indentLevel++;
      <?version end add?>
      <?version 02 add?>
        nl(); 
        emit("ELEMENT: ");
      <?version end add?>
        String eName = sName; // element name
        if ("".equals(eName)) eName = qName; // not namespaceAware
        emit("&lt;"+eName);
        if (attrs != null) {
            for (int i = 0; i &lt; attrs.getLength(); i++) {
                String aName = attrs.getLocalName(i); // Attr name 
                if ("".equals(aName)) aName = attrs.getQName(i);
              <?version 02 del?>
                emit(" ");
                emit(aName+"=\""+attrs.getValue(i)+"\"");
              <?version end del?>
              <?version 02 add?>
                nl();
                emit("   ATTR: ");
                emit(aName);
                emit("\t\"");
                emit(attrs.getValue(i));
                emit("\"");
              <?version end add?>
            }
        }
      <?version 02 add?>
        if (attrs.getLength() > 0) nl();
      <?version end add?>
        emit(">");
    }

    public void endElement(String namespaceURI,
                           String sName, // simple name
                           String qName  // qualified name
                          )
    throws SAXException
    {
        echoText();
      <?version 02 add?>
        nl();
        emit("END_ELM: ");
      <?version end add?>
        String eName = sName; // element name
        if ("".equals(eName)) eName = qName; // not namespaceAware
        emit("&lt;/"+eName+">");
      <?version 03 add?>
        indentLevel--;
      <?version end add?>
    }

    public void characters(char buf[], int offset, int len)
    throws SAXException
    {
      <?version 04 del?>
       <?version 03 add?>
        if (textBuffer != null) {
          echoText();
          textBuffer = null;
        }
       <?version end add?>
      <?version end del?>
        String s = new String(buf, offset, len);
        if (textBuffer == null) {
           textBuffer = new StringBuffer(s);
        } else {
           textBuffer.append(s);
        }
    }
    
  <?version 08 add?>
    public void ignorableWhitespace(char buf[], int offset, int len)
    throws SAXException
    {
      <?version 09 del?>
        nl(); 
        emit("IGNORABLE");
      <?version end del?>
      <?version 09 add?>
        // Ignore it
      <?version end add?>
    }

  <?version end add?>
  <?version 05 add?>
    public void processingInstruction(String target, String data)
    throws SAXException
    {
        nl();
        emit("PROCESS: ");
        emit("&lt;?"+target+" "+data+"?>");
    }

  <?version end add?>
  <?version 07 add?>
    //===========================================================
    // SAX ErrorHandler methods
    //===========================================================

    // treat validation errors as fatal
    public void error(SAXParseException e)
    throws SAXParseException
    {
        throw e;
    }

    // dump warnings too
    public void warning(SAXParseException err)
    throws SAXParseException
    {
        System.out.println("** Warning"
            + ", line " + err.getLineNumber()
            + ", uri " + err.getSystemId());
        System.out.println("   " + err.getMessage());
    }

  <?version end add?>
  <?version 11 add?>
    //===========================================================
    // LexicalEventListener methods
    //===========================================================
      
    public void comment(char[] ch, int start, int length)
    throws SAXException
    {
     <?version 12 del?>
       String text = new String(ch, start, length);
       nl(); 
       emit("COMMENT: "+text);
     <?version end del?>
    }

    public void startCDATA()
    throws SAXException
    {
     <?version 12 add?>
       echoText(); // echo anything we've seen before now
       nl(); 
       emit("START CDATA SECTION");
     <?version end add?>
    }

    public void endCDATA()
    throws SAXException
    {
     <?version 12 add?>
       echoText(); // echo the CDATA text
       nl(); 
       emit("END CDATA SECTION");
     <?version end add?>
    }

    public void startEntity(java.lang.String name)
    throws SAXException
    {
     <?version 12 add?>
       echoText(); // echo anything we've seen before now
       nl(); 
       emit("START ENTITY: "+name);
     <?version end add?>
    }

    public void endEntity(java.lang.String name)
    throws SAXException
    {
     <?version 12 add?>
       echoText(); // echo the ENTITY text
       nl(); 
       emit("END ENTITY: "+name);
     <?version end add?>
    }
    
    public void startDTD(String name, String publicId, String systemId)
    throws SAXException
    {
     <?version 12 add?>
       nl(); 
       emit("START DTD: "+name
               +"\n           publicId=" + publicId
               +"\n           systemId=" + systemId);
     <?version end add?>
    }
    
    public void endDTD()
    throws SAXException
    {
     <?version 12 add?>
       nl(); 
       emit("END DTD");
     <?version end add?>
    }

  <?version end add?>
    //===========================================================
    // Utility Methods ...
    //===========================================================
    
    // Display text accumulated in the character buffer
    private void echoText()
    throws SAXException
    {
        if (textBuffer == null) return;      
      <?version 03 del?>
       <?version 02 add?>
        nl(); 
        emit("CHARS: |");
       <?version end add?>
      <?version end del?>
      <?version 03 add?>
        nl(); 
        emit("CHARS:   ");
      <?version end add?>
        String s = ""+textBuffer;
      <?version 03 add?>
        if (!s.trim().equals("")) emit(s);
      <?version end add?>
      <?version 03 del?>
        emit(s);
       <?version 02 add?>
        emit("|");
       <?version end add?>
      <?version end del?>
        textBuffer = null;
    }

    // Wrap I/O exceptions in SAX exceptions, to
    // suit handler signature requirements
    private void emit(String s)
    throws SAXException
    {
        try {
            out.write(s);
            out.flush();
        } catch (IOException e) {
            throw new SAXException("I/O error", e);
        }
    }

    // Start a new line
  <?version 03 add?>
    // and indent the next line appropriately
  <?version end add?>
    private void nl()
    throws SAXException
    {
        String lineEnd =  System.getProperty("line.separator");
        try {
            out.write(lineEnd);
          <?version 03 add?>
            for (int i=0; i &lt; indentLevel; i++) out.write(indentString);
          <?version end add?>
        } catch (IOException e) {
            throw new SAXException("I/O error", e);
        }
    }
}
</pre>
