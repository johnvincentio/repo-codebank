<?xml version='1.0' encoding='US-ASCII'?>
<pre>
/*
 * @(#)TransformationApp<?version #?>.java	1.9 98/11/10
 *
 * Copyright (c) 2004 Sun Microsystems, Inc.  All rights reserved.  U.S.
 * Government Rights - Commercial software.  Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and
 * applicable provisions of the FAR and its supplements.  Use is subject
 * to license terms. 
 *
 * This distribution may include materials developed by third parties.
 * Sun, Sun Microsystems, the Sun logo, Java and J2EE are trademarks
 * or registered trademarks of Sun Microsystems, Inc. in the U.S. and
 * other countries. 
 *
 * Copyright (c) 2004 Sun Microsystems, Inc. Tous droits reserves.
 *
 * Droits du gouvernement americain, utilisateurs gouvernementaux - logiciel
 * commercial. Les utilisateurs gouvernementaux sont soumis au contrat de
 * licence standard de Sun Microsystems, Inc., ainsi qu'aux dispositions
 * en vigueur de la FAR (Federal Acquisition Regulations) et des
 * supplements a celles-ci.  Distribue par des licences qui en
 * restreignent l'utilisation.
 *
 * Cette distribution peut comprendre des composants developpes par des
 * tierces parties. Sun, Sun Microsystems, le logo Sun, Java et J2EE
 * sont des marques de fabrique ou des marques deposees de Sun
 * Microsystems, Inc. aux Etats-Unis et dans d'autres pays.
 */

import javax.xml.parsers.DocumentBuilder; 
import javax.xml.parsers.DocumentBuilderFactory;  
import javax.xml.parsers.FactoryConfigurationError;  
import javax.xml.parsers.ParserConfigurationException;
 
import org.xml.sax.SAXException;  
import org.xml.sax.SAXParseException;  
<?version 4 add?>
import org.xml.sax.ContentHandler;
import org.xml.sax.InputSource;
<?version end add?>

<?version 4 del?>
import org.w3c.dom.Document;
import org.w3c.dom.DOMException;
 <?version 3 add?>
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
 <?version end add?>
<?version end del?>

<?version end del?>
<?version 2 add?>

// For write operation
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerConfigurationException;

<?version 4 del?>
import javax.xml.transform.dom.DOMSource;  
<?version end del?>
<?version 4 add?>
import javax.xml.transform.sax.SAXSource;  
<?version end add?>
import javax.xml.transform.stream.StreamResult; 

<?version end add?>
import java.io.*;

public class TransformationApp<?version #?> 
{
  <?version 4 del?>
    // Global value so it can be ref'd by the tree-adapter
    static Document document; 
  <?version end del?>

    public static void main (String argv [])
    {
        if (argv.length != 1) {
            System.err.println ("Usage: java TransformationApp filename");
            System.exit (1);
        }

      <?version 4 del?>
        DocumentBuilderFactory factory =
            DocumentBuilderFactory.newInstance();
        //factory.setNamespaceAware(true);
        //factory.setValidating(true);   
      <?version end del?>
      <?version 4 add?> 
        // Create the sax "parser".
        AddressBookReader02 saxReader = new AddressBookReader02();
      <?version end add?> 
        try {
            File f = new File(argv[0]);
          <?version 4 del?> 
            DocumentBuilder builder = factory.newDocumentBuilder();
            document = builder.parse(f);
          <?version end del?> 
          <?version 3 add?> 
          <?version 4 del?> 

            // Get the first &lt;slide&gt; element in the DOM
            NodeList list = document.getElementsByTagName("slide");
            Node node = list.item(0);
          <?version end del?> 
          <?version end add?> 
          <?version end del?> 

          <?version 2 add?> 
            // Use a Transformer for output
            TransformerFactory tFactory =
                TransformerFactory.newInstance();
            Transformer transformer = tFactory.newTransformer();
          <?version 3 del?> 
            DOMSource source = new DOMSource(document);
          <?version end del?> 
          <?version 3 add?>
           <?version 4 del?>
            DOMSource source = new DOMSource(node);
           <?version end del?>
          <?version end add?>
          <?version 4 add?>
          
            // Use the parser as a SAX source for input
            FileReader fr = new FileReader(f);
            BufferedReader br = new BufferedReader(fr);
            InputSource inputSource = new InputSource(fr);
            SAXSource source = new SAXSource(saxReader, inputSource);
          <?version end add?>
            StreamResult result = new StreamResult(System.out);
            transformer.transform(source, result);
           
          <?version end add?>
                   
      <?version 2 add?>
        } catch (TransformerConfigurationException tce) {
           // Error generated by the parser
           System.out.println ("\n** Transformer Factory error");
           System.out.println("   " + tce.getMessage() );

           // Use the contained exception, if any
           Throwable x = tce;
           if (tce.getException() != null)
               x = tce.getException();
           x.printStackTrace();
      
        } catch (TransformerException te) {
           // Error generated by the parser
           System.out.println ("\n** Transformation error");
           System.out.println("   " + te.getMessage() );

           // Use the contained exception, if any
           Throwable x = te;
           if (te.getException() != null)
               x = te.getException();
           x.printStackTrace();
           
       <?version end add?>
       <?version 4 del?>
        } catch (SAXParseException spe) {
           // Error generated by the parser
           System.out.println("\n** Parsing error"
              + ", line " + spe.getLineNumber()
              + ", uri " + spe.getSystemId());
           System.out.println("   " + spe.getMessage() );

           // Use the contained exception, if any
           Exception  x = spe;
           if (spe.getException() != null)
               x = spe.getException();
           x.printStackTrace();

         } catch (SAXException sxe) {
           // Error generated by this application
           // (or a parser-initialization error)
           Exception  x = sxe;
           if (sxe.getException() != null)
               x = sxe.getException();
           x.printStackTrace();

        } catch (ParserConfigurationException pce) {
            // Parser with specified options can't be built
            pce.printStackTrace();

       <?version end del?>
        } catch (IOException ioe) {
           // I/O error
           ioe.printStackTrace();
        }

    } // main  

}
</pre>
